{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Automated ML\n",
        "\n",
        "TODO: Import Dependencies. In the cell below, import all the dependencies that you will need to complete the project."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "from sklearn import datasets\r\n",
        "import pkg_resources\r\n",
        "import azureml.core\r\n",
        "from azureml.core import Workspace, Experiment\r\n",
        "from azureml.core.compute import ComputeTarget, AmlCompute\r\n",
        "from azureml.core.compute_target import ComputeTargetException\r\n",
        "from azureml.core.dataset import Dataset\r\n",
        "from azureml.core.environment import Environment\r\n",
        "from azureml.core.model import InferenceConfig\r\n",
        "from azureml.core.webservice import AciWebservice, Webservice\r\n",
        "from azureml.core.model import InferenceConfig, Model\r\n",
        "from azureml.train.automl import AutoMLConfig\r\n",
        "from azureml.pipeline.steps import AutoMLStep\r\n",
        "from azureml.widgets import RunDetails\r\n",
        "from pprint import pprint\r\n",
        "import json\r\n",
        "import requests\r\n",
        "import logging\r\n",
        "import os\r\n",
        "import csv"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "gather": {
          "logged": 1618808236533
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Dataset\n",
        "\n",
        "### Overview\n",
        "Employee Attrition affects every organization. The IBM HR Attrition Case Study is aimed at determining factors that lead to employee attrition and predict those at risk of leaving the company.\n",
        "\n",
        "The Dataset consists of 35 columns, which will help us predict employee attrition. We will use the AutoML feature of Microsoft Azure to train different models on the dataset, deploy the best model and interact with it as a web service.\n",
        "\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Import Workspace**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ws = Workspace.from_config()\n",
        "\n",
        "print('Workspace name: ' + ws.name, \n",
        "      'Azure region: ' + ws.location, \n",
        "      'Subscription id: ' + ws.subscription_id,\n",
        "      'Resource group: ' + ws.resource_group, sep = '\\n')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Workspace name: quick-starts-ws-143105\n",
            "Azure region: southcentralus\n",
            "Subscription id: 1b944a9b-fdae-4f97-aeb1-b7eea0beac53\n",
            "Resource group: aml-quickstarts-143105\n"
          ]
        }
      ],
      "execution_count": 2,
      "metadata": {
        "gather": {
          "logged": 1618808469178
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create an Experiment**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# choosing a name for experiment\r\n",
        "experiment_name = 'employee-attrition-automl'\r\n",
        "experiment=Experiment(ws, experiment_name)\r\n",
        "\r\n",
        "run = experiment.start_logging()"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618808560236
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Create Compute Cluster**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cluster_name = \"notebook143105\"\r\n",
        "\r\n",
        "try:\r\n",
        "    cpu_cluster = ComputeTarget(workspace=ws, name=cluster_name)\r\n",
        "    print('Found existing compute target, using it!')\r\n",
        "except ComputeTargetException:\r\n",
        "    print('Creating a new compute target!')\r\n",
        "    compute_config = AmlCompute.provisioning_configuration(vm_size='STANDARD_D2_V2', max_nodes=4)\r\n",
        "    \r\n",
        "    # create the cluster\r\n",
        "    cpu_cluster = ComputeTarget.create(ws, cluster_name, compute_config)\r\n",
        "    \r\n",
        "cpu_cluster.wait_for_completion(show_output=True)\r\n",
        " \r\n",
        "# Using get_status() to get a detailed status for the current cluster.\r\n",
        "print(cpu_cluster.get_status().serialize())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found existing compute target, using it!\n",
            "\n",
            "Running\n",
            "{'errors': [], 'creationTime': '2021-04-19T03:10:01.054453+00:00', 'createdBy': {'userObjectId': '695a9b50-dd79-4e6b-b760-e29d07a0e1fd', 'userTenantId': '660b3398-b80e-49d2-bc5b-ac1dc93b5254', 'userName': 'ODL_User 143105'}, 'modifiedTime': '2021-04-19T03:12:32.756932+00:00', 'state': 'Running', 'vmSize': 'STANDARD_DS3_V2'}\n"
          ]
        }
      ],
      "execution_count": 5,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618808682996
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Import Dataset**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Try to load the dataset from the Workspace. Otherwise, create it from the file\r\n",
        "# NOTE: update the key to match the dataset name\r\n",
        "found = False\r\n",
        "key = \"Employee Attrition\"\r\n",
        "description_text = \"IBM HR Analytics Employee Attrition & Performance\"\r\n",
        "\r\n",
        "if key in ws.datasets.keys(): \r\n",
        "        found = True\r\n",
        "        dataset = ws.datasets[key] \r\n",
        "\r\n",
        "if not found:\r\n",
        "        # Create AML Dataset and register it into Workspace\r\n",
        "        data = 'https://raw.githubusercontent.com/ObinnaIheanachor/Capstone-Project-Udacity-Machine-Learning-Engineer/main/data/WA_Fn-UseC_-HR-Employee-Attrition.csv'\r\n",
        "        dataset = Dataset.Tabular.from_delimited_files(data)        \r\n",
        "        #Register Dataset in Workspace\r\n",
        "        dataset = dataset.register(workspace=ws,\r\n",
        "                                   name=key,\r\n",
        "                                   description=description_text)\r\n",
        "\r\n",
        "\r\n",
        "df = dataset.to_pandas_dataframe()\r\n",
        "df.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "               Age    DailyRate  DistanceFromHome    Education  EmployeeCount  \\\ncount  1470.000000  1470.000000       1470.000000  1470.000000         1470.0   \nmean     36.923810   802.485714          9.192517     2.912925            1.0   \nstd       9.135373   403.509100          8.106864     1.024165            0.0   \nmin      18.000000   102.000000          1.000000     1.000000            1.0   \n25%      30.000000   465.000000          2.000000     2.000000            1.0   \n50%      36.000000   802.000000          7.000000     3.000000            1.0   \n75%      43.000000  1157.000000         14.000000     4.000000            1.0   \nmax      60.000000  1499.000000         29.000000     5.000000            1.0   \n\n       EmployeeNumber  EnvironmentSatisfaction   HourlyRate  JobInvolvement  \\\ncount     1470.000000              1470.000000  1470.000000     1470.000000   \nmean      1024.865306                 2.721769    65.891156        2.729932   \nstd        602.024335                 1.093082    20.329428        0.711561   \nmin          1.000000                 1.000000    30.000000        1.000000   \n25%        491.250000                 2.000000    48.000000        2.000000   \n50%       1020.500000                 3.000000    66.000000        3.000000   \n75%       1555.750000                 4.000000    83.750000        3.000000   \nmax       2068.000000                 4.000000   100.000000        4.000000   \n\n          JobLevel  ...  RelationshipSatisfaction  StandardHours  \\\ncount  1470.000000  ...               1470.000000         1470.0   \nmean      2.063946  ...                  2.712245           80.0   \nstd       1.106940  ...                  1.081209            0.0   \nmin       1.000000  ...                  1.000000           80.0   \n25%       1.000000  ...                  2.000000           80.0   \n50%       2.000000  ...                  3.000000           80.0   \n75%       3.000000  ...                  4.000000           80.0   \nmax       5.000000  ...                  4.000000           80.0   \n\n       StockOptionLevel  TotalWorkingYears  TrainingTimesLastYear  \\\ncount       1470.000000        1470.000000            1470.000000   \nmean           0.793878          11.279592               2.799320   \nstd            0.852077           7.780782               1.289271   \nmin            0.000000           0.000000               0.000000   \n25%            0.000000           6.000000               2.000000   \n50%            1.000000          10.000000               3.000000   \n75%            1.000000          15.000000               3.000000   \nmax            3.000000          40.000000               6.000000   \n\n       WorkLifeBalance  YearsAtCompany  YearsInCurrentRole  \\\ncount      1470.000000     1470.000000         1470.000000   \nmean          2.761224        7.008163            4.229252   \nstd           0.706476        6.126525            3.623137   \nmin           1.000000        0.000000            0.000000   \n25%           2.000000        3.000000            2.000000   \n50%           3.000000        5.000000            3.000000   \n75%           3.000000        9.000000            7.000000   \nmax           4.000000       40.000000           18.000000   \n\n       YearsSinceLastPromotion  YearsWithCurrManager  \ncount              1470.000000           1470.000000  \nmean                  2.187755              4.123129  \nstd                   3.222430              3.568136  \nmin                   0.000000              0.000000  \n25%                   0.000000              2.000000  \n50%                   1.000000              3.000000  \n75%                   3.000000              7.000000  \nmax                  15.000000             17.000000  \n\n[8 rows x 26 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>DailyRate</th>\n      <th>DistanceFromHome</th>\n      <th>Education</th>\n      <th>EmployeeCount</th>\n      <th>EmployeeNumber</th>\n      <th>EnvironmentSatisfaction</th>\n      <th>HourlyRate</th>\n      <th>JobInvolvement</th>\n      <th>JobLevel</th>\n      <th>...</th>\n      <th>RelationshipSatisfaction</th>\n      <th>StandardHours</th>\n      <th>StockOptionLevel</th>\n      <th>TotalWorkingYears</th>\n      <th>TrainingTimesLastYear</th>\n      <th>WorkLifeBalance</th>\n      <th>YearsAtCompany</th>\n      <th>YearsInCurrentRole</th>\n      <th>YearsSinceLastPromotion</th>\n      <th>YearsWithCurrManager</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.0</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>...</td>\n      <td>1470.000000</td>\n      <td>1470.0</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n      <td>1470.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>36.923810</td>\n      <td>802.485714</td>\n      <td>9.192517</td>\n      <td>2.912925</td>\n      <td>1.0</td>\n      <td>1024.865306</td>\n      <td>2.721769</td>\n      <td>65.891156</td>\n      <td>2.729932</td>\n      <td>2.063946</td>\n      <td>...</td>\n      <td>2.712245</td>\n      <td>80.0</td>\n      <td>0.793878</td>\n      <td>11.279592</td>\n      <td>2.799320</td>\n      <td>2.761224</td>\n      <td>7.008163</td>\n      <td>4.229252</td>\n      <td>2.187755</td>\n      <td>4.123129</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>9.135373</td>\n      <td>403.509100</td>\n      <td>8.106864</td>\n      <td>1.024165</td>\n      <td>0.0</td>\n      <td>602.024335</td>\n      <td>1.093082</td>\n      <td>20.329428</td>\n      <td>0.711561</td>\n      <td>1.106940</td>\n      <td>...</td>\n      <td>1.081209</td>\n      <td>0.0</td>\n      <td>0.852077</td>\n      <td>7.780782</td>\n      <td>1.289271</td>\n      <td>0.706476</td>\n      <td>6.126525</td>\n      <td>3.623137</td>\n      <td>3.222430</td>\n      <td>3.568136</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>18.000000</td>\n      <td>102.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.0</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>30.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>80.0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>30.000000</td>\n      <td>465.000000</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>1.0</td>\n      <td>491.250000</td>\n      <td>2.000000</td>\n      <td>48.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>2.000000</td>\n      <td>80.0</td>\n      <td>0.000000</td>\n      <td>6.000000</td>\n      <td>2.000000</td>\n      <td>2.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>36.000000</td>\n      <td>802.000000</td>\n      <td>7.000000</td>\n      <td>3.000000</td>\n      <td>1.0</td>\n      <td>1020.500000</td>\n      <td>3.000000</td>\n      <td>66.000000</td>\n      <td>3.000000</td>\n      <td>2.000000</td>\n      <td>...</td>\n      <td>3.000000</td>\n      <td>80.0</td>\n      <td>1.000000</td>\n      <td>10.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>5.000000</td>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>43.000000</td>\n      <td>1157.000000</td>\n      <td>14.000000</td>\n      <td>4.000000</td>\n      <td>1.0</td>\n      <td>1555.750000</td>\n      <td>4.000000</td>\n      <td>83.750000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>...</td>\n      <td>4.000000</td>\n      <td>80.0</td>\n      <td>1.000000</td>\n      <td>15.000000</td>\n      <td>3.000000</td>\n      <td>3.000000</td>\n      <td>9.000000</td>\n      <td>7.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>60.000000</td>\n      <td>1499.000000</td>\n      <td>29.000000</td>\n      <td>5.000000</td>\n      <td>1.0</td>\n      <td>2068.000000</td>\n      <td>4.000000</td>\n      <td>100.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>...</td>\n      <td>4.000000</td>\n      <td>80.0</td>\n      <td>3.000000</td>\n      <td>40.000000</td>\n      <td>6.000000</td>\n      <td>4.000000</td>\n      <td>40.000000</td>\n      <td>18.000000</td>\n      <td>15.000000</td>\n      <td>17.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 26 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618808880406
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## AutoML Configuration\n",
        "\n",
        "This is a binary classification problem with label column 'Attrition' having output as 'true' or 'false'. `25 mins` is the `experiment_timeout_duration`, a maximum of 5 concurrent iterations take place together, and the primary metric is `AUC_weighted`."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Automl setting\n",
        "automl_settings = automl_settings = {\n",
        "    \"experiment_timeout_minutes\": 20,\n",
        "    \"max_concurrent_iterations\": 5,\n",
        "    \"primary_metric\" : 'AUC_weighted'\n",
        "}\n",
        "\n",
        "# Automl config\n",
        "automl_config = AutoMLConfig(compute_target=cpu_cluster,\n",
        "                             task = \"classification\",\n",
        "                             training_data=dataset,\n",
        "                             label_column_name=\"Attrition\",   \n",
        "                             path = './capstone-project',\n",
        "                             enable_early_stopping= True,\n",
        "                             featurization= 'auto',\n",
        "                             debug_log = \"automl_errors.log\",\n",
        "                             **automl_settings\n",
        "                             )"
      ],
      "outputs": [],
      "execution_count": 7,
      "metadata": {
        "gather": {
          "logged": 1618809234108
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Submitting the experiment\n",
        "remote_run = experiment.submit(automl_config, show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Submitting remote run.\n",
            "No run_configuration provided, running on notebook143105 with default configuration\n",
            "Running on remote compute: notebook143105\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<IPython.core.display.HTML object>",
            "text/html": "<table style=\"width:100%\"><tr><th>Experiment</th><th>Id</th><th>Type</th><th>Status</th><th>Details Page</th><th>Docs Page</th></tr><tr><td>employee-attrition-automl</td><td>AutoML_4d9148a5-c041-4e96-a3d9-557b261db721</td><td>automl</td><td>NotStarted</td><td><a href=\"https://ml.azure.com/runs/AutoML_4d9148a5-c041-4e96-a3d9-557b261db721?wsid=/subscriptions/1b944a9b-fdae-4f97-aeb1-b7eea0beac53/resourcegroups/aml-quickstarts-143105/workspaces/quick-starts-ws-143105&amp;tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\" target=\"_blank\" rel=\"noopener\">Link to Azure Machine Learning studio</a></td><td><a href=\"https://docs.microsoft.com/en-us/python/api/overview/azure/ml/intro?view=azure-ml-py\" target=\"_blank\" rel=\"noopener\">Link to Documentation</a></td></tr></table>"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Current status: FeaturesGeneration. Generating features for the dataset.\n",
            "Current status: DatasetFeaturization. Beginning to fit featurizers and featurize the dataset.\n",
            "Current status: DatasetBalancing. Performing class balancing sweeping\n",
            "Current status: DatasetCrossValidationSplit. Generating individually featurized CV splits.\n",
            "Current status: ModelSelection. Beginning model selection.\n",
            "\n",
            "****************************************************************************************************\n",
            "DATA GUARDRAILS: \n",
            "\n",
            "TYPE:         Cross validation\n",
            "STATUS:       DONE\n",
            "DESCRIPTION:  Each iteration of the trained model was validated through cross-validation.\n",
            "              \n",
            "DETAILS:      \n",
            "+---------------------------------+\n",
            "|Number of folds                  |\n",
            "+=================================+\n",
            "|3                                |\n",
            "+---------------------------------+\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Class balancing detection\n",
            "STATUS:       ALERTED\n",
            "DESCRIPTION:  To decrease model bias, please cancel the current run and fix balancing problem.\n",
            "              Learn more about imbalanced data: https://aka.ms/AutomatedMLImbalancedData\n",
            "DETAILS:      Imbalanced data can lead to a falsely perceived positive effect of a model's accuracy because the input data has bias towards one class.\n",
            "+---------------------------------+---------------------------------+--------------------------------------+\n",
            "|Size of the smallest class       |Name/Label of the smallest class |Number of samples in the training data|\n",
            "+=================================+=================================+======================================+\n",
            "|237                              |True                             |1470                                  |\n",
            "+---------------------------------+---------------------------------+--------------------------------------+\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         Missing feature values imputation\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  No feature missing values were detected in the training data.\n",
            "              Learn more about missing value imputation: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "TYPE:         High cardinality feature detection\n",
            "STATUS:       PASSED\n",
            "DESCRIPTION:  Your inputs were analyzed, and no high cardinality features were detected.\n",
            "              Learn more about high cardinality feature handling: https://aka.ms/AutomatedMLFeaturization\n",
            "\n",
            "****************************************************************************************************\n",
            "\n",
            "****************************************************************************************************\n",
            "ITERATION: The iteration being evaluated.\n",
            "PIPELINE: A summary description of the pipeline being evaluated.\n",
            "DURATION: Time taken for the current iteration.\n",
            "METRIC: The result of computing score on the fitted pipeline.\n",
            "BEST: The best observed score thus far.\n",
            "****************************************************************************************************\n",
            "\n",
            " ITERATION   PIPELINE                                       DURATION      METRIC      BEST\n",
            "         0   MaxAbsScaler LightGBM                          0:05:46       0.7737    0.7737\n",
            "         1   MaxAbsScaler XGBoostClassifier                 0:05:48       0.7832    0.7832\n",
            "         2   MaxAbsScaler RandomForest                      0:05:52       0.7714    0.7832\n",
            "         3   MaxAbsScaler RandomForest                      0:05:48       0.7733    0.7832\n",
            "         4   MaxAbsScaler RandomForest                      0:05:52       0.7378    0.7832\n",
            "         8   MaxAbsScaler RandomForest                      0:05:40       0.7833    0.7833\n",
            "         5   MaxAbsScaler ExtremeRandomTrees                0:05:50       0.7660    0.7833\n",
            "         6   MaxAbsScaler ExtremeRandomTrees                0:05:49       0.7965    0.7965\n",
            "         7   MaxAbsScaler ExtremeRandomTrees                0:05:46       0.7877    0.7965\n",
            "         9   MaxAbsScaler ExtremeRandomTrees                0:05:50       0.7969    0.7969\n",
            "        10   MaxAbsScaler RandomForest                      0:06:02       0.7771    0.7969\n",
            "        11   MaxAbsScaler RandomForest                      0:05:56       0.7708    0.7969\n",
            "        12   MaxAbsScaler RandomForest                      0:05:58       0.7941    0.7969\n",
            "        13   StandardScalerWrapper XGBoostClassifier        0:05:59       0.7600    0.7969\n",
            "        14   MaxAbsScaler RandomForest                      0:05:52       0.7513    0.7969\n",
            "        18   MaxAbsScaler RandomForest                      0:05:47       0.7640    0.7969\n",
            "        15   StandardScalerWrapper ExtremeRandomTrees       0:05:54       0.7406    0.7969\n",
            "ERROR: {\n",
            "    \"additional_properties\": {},\n",
            "    \"error\": {\n",
            "        \"additional_properties\": {\n",
            "            \"debugInfo\": null\n",
            "        },\n",
            "        \"code\": \"UserError\",\n",
            "        \"severity\": null,\n",
            "        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_parameters\": {},\n",
            "        \"reference_code\": null,\n",
            "        \"details_uri\": null,\n",
            "        \"target\": null,\n",
            "        \"details\": [],\n",
            "        \"inner_error\": {\n",
            "            \"additional_properties\": {},\n",
            "            \"code\": \"ResourceExhausted\",\n",
            "            \"inner_error\": {\n",
            "                \"additional_properties\": {},\n",
            "                \"code\": \"Timeout\",\n",
            "                \"inner_error\": {\n",
            "                    \"additional_properties\": {},\n",
            "                    \"code\": \"ExperimentTimeoutForIterations\",\n",
            "                    \"inner_error\": null\n",
            "                }\n",
            "            }\n",
            "        }\n",
            "    },\n",
            "    \"correlation\": null,\n",
            "    \"environment\": null,\n",
            "    \"location\": null,\n",
            "    \"time\": {},\n",
            "    \"component_name\": null\n",
            "}\n",
            "        16   MaxAbsScaler ExtremeRandomTrees                0:05:48       0.7739    0.7969\n",
            "ERROR: {\n",
            "    \"additional_properties\": {},\n",
            "    \"error\": {\n",
            "        \"additional_properties\": {\n",
            "            \"debugInfo\": null\n",
            "        },\n",
            "        \"code\": \"UserError\",\n",
            "        \"severity\": null,\n",
            "        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_parameters\": {},\n",
            "        \"reference_code\": null,\n",
            "        \"details_uri\": null,\n",
            "        \"target\": null,\n",
            "        \"details\": [],\n",
            "        \"inner_error\": {\n",
            "            \"additional_properties\": {},\n",
            "            \"code\": \"ResourceExhausted\",\n",
            "            \"inner_error\": {\n",
            "                \"additional_properties\": {},\n",
            "                \"code\": \"Timeout\",\n",
            "                \"inner_error\": {\n",
            "                    \"additional_properties\": {},\n",
            "                    \"code\": \"ExperimentTimeoutForIterations\",\n",
            "                    \"inner_error\": null\n",
            "                }\n",
            "            }\n",
            "        }\n",
            "    },\n",
            "    \"correlation\": null,\n",
            "    \"environment\": null,\n",
            "    \"location\": null,\n",
            "    \"time\": {},\n",
            "    \"component_name\": null\n",
            "}\n",
            "        17   MaxAbsScaler ExtremeRandomTrees                0:05:48       0.7806    0.7969\n",
            "ERROR: {\n",
            "    \"additional_properties\": {},\n",
            "    \"error\": {\n",
            "        \"additional_properties\": {\n",
            "            \"debugInfo\": null\n",
            "        },\n",
            "        \"code\": \"UserError\",\n",
            "        \"severity\": null,\n",
            "        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_parameters\": {},\n",
            "        \"reference_code\": null,\n",
            "        \"details_uri\": null,\n",
            "        \"target\": null,\n",
            "        \"details\": [],\n",
            "        \"inner_error\": {\n",
            "            \"additional_properties\": {},\n",
            "            \"code\": \"ResourceExhausted\",\n",
            "            \"inner_error\": {\n",
            "                \"additional_properties\": {},\n",
            "                \"code\": \"Timeout\",\n",
            "                \"inner_error\": {\n",
            "                    \"additional_properties\": {},\n",
            "                    \"code\": \"ExperimentTimeoutForIterations\",\n",
            "                    \"inner_error\": null\n",
            "                }\n",
            "            }\n",
            "        }\n",
            "    },\n",
            "    \"correlation\": null,\n",
            "    \"environment\": null,\n",
            "    \"location\": null,\n",
            "    \"time\": {},\n",
            "    \"component_name\": null\n",
            "}\n",
            "        19   StandardScalerWrapper LogisticRegression       0:05:47       0.7817    0.7969\n",
            "ERROR: {\n",
            "    \"additional_properties\": {},\n",
            "    \"error\": {\n",
            "        \"additional_properties\": {\n",
            "            \"debugInfo\": null\n",
            "        },\n",
            "        \"code\": \"UserError\",\n",
            "        \"severity\": null,\n",
            "        \"message\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_format\": \"Experiment timeout reached, please consider increasing your experiment timeout.\",\n",
            "        \"message_parameters\": {},\n",
            "        \"reference_code\": null,\n",
            "        \"details_uri\": null,\n",
            "        \"target\": null,\n",
            "        \"details\": [],\n",
            "        \"inner_error\": {\n",
            "            \"additional_properties\": {},\n",
            "            \"code\": \"ResourceExhausted\",\n",
            "            \"inner_error\": {\n",
            "                \"additional_properties\": {},\n",
            "                \"code\": \"Timeout\",\n",
            "                \"inner_error\": {\n",
            "                    \"additional_properties\": {},\n",
            "                    \"code\": \"ExperimentTimeoutForIterations\",\n",
            "                    \"inner_error\": null\n",
            "                }\n",
            "            }\n",
            "        }\n",
            "    },\n",
            "    \"correlation\": null,\n",
            "    \"environment\": null,\n",
            "    \"location\": null,\n",
            "    \"time\": {},\n",
            "    \"component_name\": null\n",
            "}\n",
            "        20    VotingEnsemble                                0:06:07       0.8230    0.8230\n",
            "        21    StackEnsemble                                 0:06:14       0.8162    0.8230\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {
        "gather": {
          "logged": 1618812098575
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Run Details\n",
        "\n",
        "\n",
        "TODO: In the cell below, use the `RunDetails` widget to show the different experiments."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "RunDetails(remote_run).show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "_AutoMLWidget(widget_settings={'childWidgetDisplay': 'popup', 'send_telemetry': False, 'log_level': 'INFO', 's…",
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5b0b0ea69ea04c6d9d864a7c0d6e2746"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "application/aml.mini.widget.v1": "{\"status\": \"Completed\", \"workbench_run_details_uri\": \"https://ml.azure.com/runs/AutoML_4d9148a5-c041-4e96-a3d9-557b261db721?wsid=/subscriptions/1b944a9b-fdae-4f97-aeb1-b7eea0beac53/resourcegroups/aml-quickstarts-143105/workspaces/quick-starts-ws-143105&tid=660b3398-b80e-49d2-bc5b-ac1dc93b5254\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"run_properties\": {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"created_utc\": \"2021-04-19T05:14:44.237088Z\", \"properties\": {\"num_iterations\": \"1000\", \"training_type\": \"TrainFull\", \"acquisition_function\": \"EI\", \"primary_metric\": \"AUC_weighted\", \"train_split\": \"0\", \"acquisition_parameter\": \"0\", \"num_cross_validation\": null, \"target\": \"notebook143105\", \"AMLSettingsJsonString\": \"{\\\"path\\\":null,\\\"name\\\":\\\"employee-attrition-automl\\\",\\\"subscription_id\\\":\\\"1b944a9b-fdae-4f97-aeb1-b7eea0beac53\\\",\\\"resource_group\\\":\\\"aml-quickstarts-143105\\\",\\\"workspace_name\\\":\\\"quick-starts-ws-143105\\\",\\\"region\\\":\\\"southcentralus\\\",\\\"compute_target\\\":\\\"notebook143105\\\",\\\"spark_service\\\":null,\\\"azure_service\\\":\\\"remote\\\",\\\"many_models\\\":false,\\\"pipeline_fetch_max_batch_size\\\":1,\\\"enable_batch_run\\\":false,\\\"enable_run_restructure\\\":false,\\\"iterations\\\":1000,\\\"primary_metric\\\":\\\"AUC_weighted\\\",\\\"task_type\\\":\\\"classification\\\",\\\"data_script\\\":null,\\\"test_size\\\":0.0,\\\"validation_size\\\":0.0,\\\"n_cross_validations\\\":null,\\\"y_min\\\":null,\\\"y_max\\\":null,\\\"num_classes\\\":null,\\\"featurization\\\":\\\"auto\\\",\\\"_ignore_package_version_incompatibilities\\\":false,\\\"is_timeseries\\\":false,\\\"max_cores_per_iteration\\\":1,\\\"max_concurrent_iterations\\\":5,\\\"iteration_timeout_minutes\\\":null,\\\"mem_in_mb\\\":null,\\\"enforce_time_on_windows\\\":false,\\\"experiment_timeout_minutes\\\":20,\\\"experiment_exit_score\\\":null,\\\"whitelist_models\\\":null,\\\"blacklist_algos\\\":[\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\"],\\\"supported_models\\\":[\\\"DecisionTree\\\",\\\"RandomForest\\\",\\\"TensorFlowLinearClassifier\\\",\\\"TensorFlowDNN\\\",\\\"SGD\\\",\\\"LogisticRegression\\\",\\\"LightGBM\\\",\\\"ExtremeRandomTrees\\\",\\\"SVM\\\",\\\"XGBoostClassifier\\\",\\\"GradientBoosting\\\",\\\"KNN\\\",\\\"AveragedPerceptronClassifier\\\",\\\"BernoulliNaiveBayes\\\",\\\"MultinomialNaiveBayes\\\",\\\"LinearSVM\\\"],\\\"private_models\\\":[],\\\"auto_blacklist\\\":true,\\\"blacklist_samples_reached\\\":false,\\\"exclude_nan_labels\\\":true,\\\"verbosity\\\":20,\\\"_debug_log\\\":\\\"azureml_automl.log\\\",\\\"show_warnings\\\":false,\\\"model_explainability\\\":true,\\\"service_url\\\":null,\\\"sdk_url\\\":null,\\\"sdk_packages\\\":null,\\\"enable_onnx_compatible_models\\\":false,\\\"enable_split_onnx_featurizer_estimator_models\\\":false,\\\"vm_type\\\":\\\"STANDARD_DS3_V2\\\",\\\"telemetry_verbosity\\\":20,\\\"send_telemetry\\\":true,\\\"enable_dnn\\\":false,\\\"scenario\\\":\\\"SDK-1.13.0\\\",\\\"environment_label\\\":null,\\\"save_mlflow\\\":false,\\\"force_text_dnn\\\":false,\\\"enable_feature_sweeping\\\":true,\\\"enable_early_stopping\\\":true,\\\"early_stopping_n_iters\\\":10,\\\"metrics\\\":null,\\\"enable_metric_confidence\\\":false,\\\"enable_ensembling\\\":true,\\\"enable_stack_ensembling\\\":true,\\\"ensemble_iterations\\\":15,\\\"enable_tf\\\":false,\\\"enable_subsampling\\\":null,\\\"subsample_seed\\\":null,\\\"enable_nimbusml\\\":false,\\\"enable_streaming\\\":false,\\\"force_streaming\\\":false,\\\"track_child_runs\\\":true,\\\"allowed_private_models\\\":[],\\\"label_column_name\\\":\\\"Attrition\\\",\\\"weight_column_name\\\":null,\\\"cv_split_column_names\\\":null,\\\"enable_local_managed\\\":false,\\\"_local_managed_run_id\\\":null,\\\"cost_mode\\\":1,\\\"lag_length\\\":0,\\\"metric_operation\\\":\\\"maximize\\\",\\\"preprocess\\\":true}\", \"DataPrepJsonString\": \"{\\\\\\\"training_data\\\\\\\": {\\\\\\\"datasetId\\\\\\\": \\\\\\\"b148eeb3-01ef-4a09-81b9-44a95d206392\\\\\\\"}, \\\\\\\"datasets\\\\\\\": 0}\", \"EnableSubsampling\": null, \"runTemplate\": \"AutoML\", \"azureml.runsource\": \"automl\", \"display_task_type\": \"classification\", \"dependencies_versions\": \"{\\\"azureml-widgets\\\": \\\"1.26.0\\\", \\\"azureml-train\\\": \\\"1.26.0\\\", \\\"azureml-train-restclients-hyperdrive\\\": \\\"1.26.0\\\", \\\"azureml-train-core\\\": \\\"1.26.0\\\", \\\"azureml-train-automl\\\": \\\"1.26.0\\\", \\\"azureml-train-automl-runtime\\\": \\\"1.26.0\\\", \\\"azureml-train-automl-client\\\": \\\"1.26.0\\\", \\\"azureml-tensorboard\\\": \\\"1.26.0\\\", \\\"azureml-telemetry\\\": \\\"1.26.0\\\", \\\"azureml-sdk\\\": \\\"1.26.0\\\", \\\"azureml-samples\\\": \\\"0+unknown\\\", \\\"azureml-pipeline\\\": \\\"1.26.0\\\", \\\"azureml-pipeline-steps\\\": \\\"1.26.0\\\", \\\"azureml-pipeline-core\\\": \\\"1.26.0\\\", \\\"azureml-opendatasets\\\": \\\"1.26.0\\\", \\\"azureml-model-management-sdk\\\": \\\"1.0.1b6.post1\\\", \\\"azureml-mlflow\\\": \\\"1.26.0\\\", \\\"azureml-interpret\\\": \\\"1.26.0\\\", \\\"azureml-explain-model\\\": \\\"1.26.0\\\", \\\"azureml-defaults\\\": \\\"1.26.0\\\", \\\"azureml-dataset-runtime\\\": \\\"1.26.0\\\", \\\"azureml-dataprep\\\": \\\"2.13.2\\\", \\\"azureml-dataprep-rslex\\\": \\\"1.11.2\\\", \\\"azureml-dataprep-native\\\": \\\"32.0.0\\\", \\\"azureml-datadrift\\\": \\\"1.26.0\\\", \\\"azureml-core\\\": \\\"1.26.0\\\", \\\"azureml-contrib-services\\\": \\\"1.26.0\\\", \\\"azureml-contrib-server\\\": \\\"1.26.0\\\", \\\"azureml-contrib-reinforcementlearning\\\": \\\"1.26.0\\\", \\\"azureml-contrib-pipeline-steps\\\": \\\"1.26.0\\\", \\\"azureml-contrib-notebook\\\": \\\"1.26.0\\\", \\\"azureml-contrib-gbdt\\\": \\\"1.26.0\\\", \\\"azureml-contrib-fairness\\\": \\\"1.26.0\\\", \\\"azureml-contrib-dataset\\\": \\\"1.26.0\\\", \\\"azureml-cli-common\\\": \\\"1.26.0\\\", \\\"azureml-automl-runtime\\\": \\\"1.26.0\\\", \\\"azureml-automl-dnn-nlp\\\": \\\"1.26.0\\\", \\\"azureml-automl-core\\\": \\\"1.26.0\\\", \\\"azureml-accel-models\\\": \\\"1.26.0\\\"}\", \"_aml_system_scenario_identification\": \"Remote.Parent\", \"ClientType\": \"SDK\", \"environment_cpu_name\": \"AzureML-AutoML\", \"environment_cpu_label\": \"prod\", \"environment_gpu_name\": \"AzureML-AutoML-GPU\", \"environment_gpu_label\": \"prod\", \"root_attribution\": \"automl\", \"attribution\": \"AutoML\", \"Orchestrator\": \"AutoML\", \"CancelUri\": \"https://southcentralus.experiments.azureml.net/jasmine/v1.0/subscriptions/1b944a9b-fdae-4f97-aeb1-b7eea0beac53/resourceGroups/aml-quickstarts-143105/providers/Microsoft.MachineLearningServices/workspaces/quick-starts-ws-143105/experimentids/d2d77a51-4b86-4026-9c24-060026fd1633/cancel/AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"ClientSdkVersion\": \"1.25.0\", \"snapshotId\": \"00000000-0000-0000-0000-000000000000\", \"SetupRunId\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_setup\", \"SetupRunContainerId\": \"dcid.AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_setup\", \"FeaturizationRunJsonPath\": \"featurizer_container.json\", \"FeaturizationRunId\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_featurize\", \"ProblemInfoJsonString\": \"{\\\"dataset_num_categorical\\\": 0, \\\"is_sparse\\\": true, \\\"subsampling\\\": false, \\\"dataset_classes\\\": 2, \\\"dataset_features\\\": 300, \\\"dataset_samples\\\": 1470, \\\"single_frequency_class_detected\\\": false}\", \"ModelExplainRunId\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_ModelExplain\"}, \"tags\": {\"model_explain_run\": \"best_run\", \"_aml_system_azureml.automlComponent\": \"AutoML\", \"pipeline_id\": \"\", \"score\": \"\", \"predicted_cost\": \"\", \"fit_time\": \"\", \"training_percent\": \"\", \"iteration\": \"\", \"run_preprocessor\": \"\", \"run_algorithm\": \"\", \"automl_best_child_run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20\", \"model_explain_best_run_child_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20\"}, \"end_time_utc\": \"2021-04-19T06:01:21.81288Z\", \"status\": \"Completed\", \"log_files\": {}, \"log_groups\": [], \"run_duration\": \"0:46:37\", \"run_number\": \"2\", \"run_queued_details\": {\"status\": \"Completed\", \"details\": null}}, \"child_runs\": [{\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_0\", \"run_number\": 6, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:30:29.205817Z\", \"end_time\": \"2021-04-19T05:36:14.8029Z\", \"created_time\": \"2021-04-19T05:30:11.544405Z\", \"created_time_dt\": \"2021-04-19T05:30:11.544405Z\", \"duration\": \"0:06:03\", \"iteration\": \"0\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, LightGBM\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77369122, \"best_metric\": 0.77369122}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_4\", \"run_number\": 7, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:30:28.44063Z\", \"end_time\": \"2021-04-19T05:36:20.564939Z\", \"created_time\": \"2021-04-19T05:30:11.561291Z\", \"created_time_dt\": \"2021-04-19T05:30:11.561291Z\", \"duration\": \"0:06:09\", \"iteration\": \"4\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.73777486, \"best_metric\": 0.78319811}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_3\", \"run_number\": 8, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:30:30.11447Z\", \"end_time\": \"2021-04-19T05:36:17.650106Z\", \"created_time\": \"2021-04-19T05:30:11.62888Z\", \"created_time_dt\": \"2021-04-19T05:30:11.62888Z\", \"duration\": \"0:06:06\", \"iteration\": \"3\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77331364, \"best_metric\": 0.78319811}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_1\", \"run_number\": 9, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:30:30.083603Z\", \"end_time\": \"2021-04-19T05:36:18.03157Z\", \"created_time\": \"2021-04-19T05:30:11.98299Z\", \"created_time_dt\": \"2021-04-19T05:30:11.98299Z\", \"duration\": \"0:06:06\", \"iteration\": \"1\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, XGBoostClassifier\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.78319811, \"best_metric\": 0.78319811}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_2\", \"run_number\": 10, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:30:28.383849Z\", \"end_time\": \"2021-04-19T05:36:20.278609Z\", \"created_time\": \"2021-04-19T05:30:11.559656Z\", \"created_time_dt\": \"2021-04-19T05:30:11.559656Z\", \"duration\": \"0:06:08\", \"iteration\": \"2\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77136113, \"best_metric\": 0.78319811}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_5\", \"run_number\": 11, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:36:32.479825Z\", \"end_time\": \"2021-04-19T05:42:22.470736Z\", \"created_time\": \"2021-04-19T05:36:16.839035Z\", \"created_time_dt\": \"2021-04-19T05:36:16.839035Z\", \"duration\": \"0:06:05\", \"iteration\": \"5\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.76599328, \"best_metric\": 0.78319811}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_6\", \"run_number\": 12, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:36:33.557686Z\", \"end_time\": \"2021-04-19T05:42:22.650587Z\", \"created_time\": \"2021-04-19T05:36:22.77377Z\", \"created_time_dt\": \"2021-04-19T05:36:22.77377Z\", \"duration\": \"0:05:59\", \"iteration\": \"6\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.79653603, \"best_metric\": 0.79653603}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_7\", \"run_number\": 13, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:36:34.440575Z\", \"end_time\": \"2021-04-19T05:42:20.485253Z\", \"created_time\": \"2021-04-19T05:36:22.864707Z\", \"created_time_dt\": \"2021-04-19T05:36:22.864707Z\", \"duration\": \"0:05:57\", \"iteration\": \"7\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.78774958, \"best_metric\": 0.79653603}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_8\", \"run_number\": 14, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:36:36.648424Z\", \"end_time\": \"2021-04-19T05:42:16.372931Z\", \"created_time\": \"2021-04-19T05:36:28.687955Z\", \"created_time_dt\": \"2021-04-19T05:36:28.687955Z\", \"duration\": \"0:05:47\", \"iteration\": \"8\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.78325238, \"best_metric\": 0.79653603}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_9\", \"run_number\": 15, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:36:40.25399Z\", \"end_time\": \"2021-04-19T05:42:30.405448Z\", \"created_time\": \"2021-04-19T05:36:28.693114Z\", \"created_time_dt\": \"2021-04-19T05:36:28.693114Z\", \"duration\": \"0:06:01\", \"iteration\": \"9\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.79687045, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_10\", \"run_number\": 16, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:42:36.098428Z\", \"end_time\": \"2021-04-19T05:48:38.185321Z\", \"created_time\": \"2021-04-19T05:42:19.623514Z\", \"created_time_dt\": \"2021-04-19T05:42:19.623514Z\", \"duration\": \"0:06:18\", \"iteration\": \"10\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77709682, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_11\", \"run_number\": 17, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:42:37.212196Z\", \"end_time\": \"2021-04-19T05:48:33.238017Z\", \"created_time\": \"2021-04-19T05:42:26.068832Z\", \"created_time_dt\": \"2021-04-19T05:42:26.068832Z\", \"duration\": \"0:06:07\", \"iteration\": \"11\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77079504, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_12\", \"run_number\": 18, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:42:37.732094Z\", \"end_time\": \"2021-04-19T05:48:36.16749Z\", \"created_time\": \"2021-04-19T05:42:26.113788Z\", \"created_time_dt\": \"2021-04-19T05:42:26.113788Z\", \"duration\": \"0:06:10\", \"iteration\": \"12\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.79412042, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_13\", \"run_number\": 19, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:42:36.411535Z\", \"end_time\": \"2021-04-19T05:48:35.83382Z\", \"created_time\": \"2021-04-19T05:42:26.128034Z\", \"created_time_dt\": \"2021-04-19T05:42:26.128034Z\", \"duration\": \"0:06:09\", \"iteration\": \"13\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, XGBoostClassifier\", \"run_properties\": \"<azureml.automl.runtime.shared.model_wrappers.StandardScalerWrapper object at 0x7fdc68532cf8\", \"primary_metric\": 0.76004381, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_14\", \"run_number\": 20, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:42:43.655413Z\", \"end_time\": \"2021-04-19T05:48:35.880096Z\", \"created_time\": \"2021-04-19T05:42:34.148562Z\", \"created_time_dt\": \"2021-04-19T05:42:34.148562Z\", \"duration\": \"0:06:01\", \"iteration\": \"14\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.75131852, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_15\", \"run_number\": 21, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:48:48.878906Z\", \"end_time\": \"2021-04-19T05:54:42.927945Z\", \"created_time\": \"2021-04-19T05:48:37.139664Z\", \"created_time_dt\": \"2021-04-19T05:48:37.139664Z\", \"duration\": \"0:06:05\", \"iteration\": \"15\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, ExtremeRandomTrees\", \"run_properties\": \"<azureml.automl.runtime.shared.model_wrappers.StandardScalerWrapper object at 0x7f7b049e7358\", \"primary_metric\": 0.74058561, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_16\", \"run_number\": 22, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:48:55.950042Z\", \"end_time\": \"2021-04-19T05:54:43.5353Z\", \"created_time\": \"2021-04-19T05:48:43.849066Z\", \"created_time_dt\": \"2021-04-19T05:48:43.849066Z\", \"duration\": \"0:05:59\", \"iteration\": \"16\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.77388422, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_18\", \"run_number\": 23, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:48:54.529271Z\", \"end_time\": \"2021-04-19T05:54:41.197048Z\", \"created_time\": \"2021-04-19T05:48:43.862984Z\", \"created_time_dt\": \"2021-04-19T05:48:43.862984Z\", \"duration\": \"0:05:57\", \"iteration\": \"18\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, RandomForest\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.76403053, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_19\", \"run_number\": 24, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:48:55.273625Z\", \"end_time\": \"2021-04-19T05:54:42.096323Z\", \"created_time\": \"2021-04-19T05:48:43.868735Z\", \"created_time_dt\": \"2021-04-19T05:48:43.868735Z\", \"duration\": \"0:05:58\", \"iteration\": \"19\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StandardScalerWrapper, LogisticRegression\", \"run_properties\": \"<azureml.automl.runtime.shared.model_wrappers.StandardScalerWrapper object at 0x7f7b4e358dd8\", \"primary_metric\": 0.78173991, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_17\", \"run_number\": 25, \"metric\": null, \"status\": \"Canceled\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:48:55.731164Z\", \"end_time\": \"2021-04-19T05:54:43.44758Z\", \"created_time\": \"2021-04-19T05:48:43.868943Z\", \"created_time_dt\": \"2021-04-19T05:48:43.868943Z\", \"duration\": \"0:05:59\", \"iteration\": \"17\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"MaxAbsScaler, ExtremeRandomTrees\", \"run_properties\": \"copy=True\", \"primary_metric\": 0.78064944, \"best_metric\": 0.79687045}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20\", \"run_number\": 26, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:55:01.870537Z\", \"end_time\": \"2021-04-19T06:01:08.492659Z\", \"created_time\": \"2021-04-19T05:54:45.335688Z\", \"created_time_dt\": \"2021-04-19T05:54:45.335688Z\", \"duration\": \"0:06:23\", \"iteration\": \"20\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"VotingEnsemble\", \"run_properties\": \"classification_labels=None,\\n                              estimators=[('9',\\n                                           Pipeline(memory=None,\\n                                                    steps=[('maxabsscaler',\\n                                                            MaxAbsScaler(copy=True\", \"primary_metric\": 0.82302233, \"best_metric\": 0.82302233}, {\"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_21\", \"run_number\": 27, \"metric\": null, \"status\": \"Completed\", \"run_type\": \"azureml.scriptrun\", \"training_percent\": \"100\", \"start_time\": \"2021-04-19T05:55:03.544591Z\", \"end_time\": \"2021-04-19T06:01:17.723328Z\", \"created_time\": \"2021-04-19T05:54:45.389654Z\", \"created_time_dt\": \"2021-04-19T05:54:45.389654Z\", \"duration\": \"0:06:32\", \"iteration\": \"21\", \"goal\": \"AUC_weighted_max\", \"run_name\": \"StackEnsemble\", \"run_properties\": \"base_learners=[('9',\\n                                        Pipeline(memory=None,\\n                                                 steps=[('maxabsscaler',\\n                                                         MaxAbsScaler(copy=True\", \"primary_metric\": 0.81622604, \"best_metric\": 0.82302233}], \"children_metrics\": {\"categories\": [0], \"series\": {\"balanced_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"balanced_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6169955152015519, 0.6229903874214235, 0.5, 0.6907409116066611, 0.5, 0.5044941811635134, 0.5334100247664078, 0.5, 0.5, 0.7206109993549273, 0.7082289288085694, 0.6966654301099245, 0.7321731645526063, 0.581897406189551, 0.5, 0.6421720597986793, 0.7136552930279588, 0.6848180279278585, 0.711308404396063, 0.7108448287351726, 0.6881948112652639, 0.6480644353303269]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"balanced_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6169955152015519, 0.6229903874214235, 0.6229903874214235, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.7206109993549273, 0.7206109993549273, 0.7206109993549273, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063]}], \"precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8387755102040817, 0.8034013605442177, 0.8387755102040817, 0.8387755102040817, 0.8496598639455782, 0.8387755102040817, 0.8387755102040817, 0.7829931972789114, 0.7408163265306121, 0.7149659863945578, 0.7510204081632653, 0.8571428571428572, 0.8387755102040817, 0.8442176870748299, 0.7374149659863946, 0.7972789115646259, 0.7217687074829932, 0.7979591836734694, 0.8659863945578231, 0.8680272108843538]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972]}], \"recall_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"recall_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8387755102040817, 0.8034013605442177, 0.8387755102040817, 0.8387755102040817, 0.8496598639455782, 0.8387755102040817, 0.8387755102040817, 0.7829931972789114, 0.7408163265306121, 0.7149659863945578, 0.7510204081632653, 0.8571428571428572, 0.8387755102040817, 0.8442176870748299, 0.7374149659863946, 0.7972789115646259, 0.7217687074829932, 0.7979591836734694, 0.8659863945578231, 0.8680272108843538]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"recall_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972]}], \"recall_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"recall_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6169955152015519, 0.6229903874214235, 0.5, 0.6907409116066611, 0.5, 0.5044941811635134, 0.5334100247664078, 0.5, 0.5, 0.7206109993549273, 0.7082289288085694, 0.6966654301099245, 0.7321731645526063, 0.581897406189551, 0.5, 0.6421720597986793, 0.7136552930279588, 0.6848180279278585, 0.711308404396063, 0.7108448287351726, 0.6881948112652639, 0.6480644353303269]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"recall_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6169955152015519, 0.6229903874214235, 0.6229903874214235, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.6907409116066611, 0.7206109993549273, 0.7206109993549273, 0.7206109993549273, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063, 0.7321731645526063]}], \"weighted_accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"weighted_accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9461140170377259, 0.9594331948884135, 0.9628928224269401, 0.8471275984824098, 0.9628928224269401, 0.9615710686968475, 0.9654318616884535, 0.9628928224269401, 0.9628928224269401, 0.8070647500052689, 0.7541184871219998, 0.7214192091370252, 0.7593126834496537, 0.9582607204656924, 0.9628928224269401, 0.9176509541989714, 0.7481570981041301, 0.8396734264201217, 0.7257720264949165, 0.8310228895557032, 0.9324496327114783, 0.9497829886979515]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"weighted_accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9461140170377259, 0.9594331948884135, 0.9628928224269401, 0.9628928224269401, 0.9628928224269401, 0.9628928224269401, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535, 0.9654318616884535]}], \"accuracy\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"accuracy\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8387755102040817, 0.8034013605442177, 0.8387755102040817, 0.8387755102040817, 0.8496598639455782, 0.8387755102040817, 0.8387755102040817, 0.7829931972789114, 0.7408163265306121, 0.7149659863945578, 0.7510204081632653, 0.8571428571428572, 0.8387755102040817, 0.8442176870748299, 0.7374149659863946, 0.7972789115646259, 0.7217687074829932, 0.7979591836734694, 0.8659863945578231, 0.8680272108843538]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"accuracy_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972]}], \"average_precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"average_precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8601562640514476, 0.8652201618192293, 0.8542677770509898, 0.8581948070749085, 0.8427720045098792, 0.8514616141645575, 0.872115779263697, 0.8614696571103857, 0.855771601653689, 0.8693088307870677, 0.8623599808981876, 0.8564938134110939, 0.871965949185928, 0.8492622698819366, 0.8431112152398951, 0.8314145645411811, 0.8550670624368343, 0.8610599417815954, 0.852489336373594, 0.8638368036851375, 0.8860677828200302, 0.8832843909389232]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"average_precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8601562640514476, 0.8652201618192293, 0.8652201618192293, 0.8652201618192293, 0.8652201618192293, 0.8652201618192293, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.872115779263697, 0.8860677828200302, 0.8860677828200302]}], \"f1_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"f1_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8295726458283353, 0.8387421875757052, 0.7654463494387085, 0.8113921627381321, 0.7654463494387085, 0.767958233425043, 0.790352467531125, 0.7654463494387085, 0.7654463494387085, 0.8008315548702699, 0.7691868715345613, 0.748540835636175, 0.7785007885602143, 0.8174382592367085, 0.7654463494387085, 0.8305763382859531, 0.7667981334881535, 0.806545682412891, 0.7543058860913745, 0.8110801506158108, 0.8538543075956223, 0.8447124340810636]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"f1_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8295726458283353, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8387421875757052, 0.8538543075956223, 0.8538543075956223]}], \"AUC_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"AUC_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7736912208980099, 0.7831981073491354, 0.7713611295753134, 0.7733136439082617, 0.737774864854896, 0.7659932792487377, 0.7965360295754446, 0.7877495832188286, 0.7832523791998134, 0.7968704526154555, 0.7770968196441093, 0.7707950400793234, 0.794120416128985, 0.7600438066332932, 0.7513185206756958, 0.740585608769412, 0.7738842219796745, 0.7806494407731132, 0.7640305309415538, 0.7817399077049488, 0.8230223307502397, 0.816226036048648]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"AUC_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7736912208980099, 0.7831981073491354, 0.7831981073491354, 0.7831981073491354, 0.7831981073491354, 0.7831981073491354, 0.7965360295754446, 0.7965360295754446, 0.7965360295754446, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.8230223307502397, 0.8230223307502397]}], \"precision_score_weighted\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"precision_score_weighted\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8349340517380371, 0.8611414697178841, 0.7042135221435514, 0.8254181058452618, 0.7042135221435514, 0.7336546862926703, 0.8730825149918879, 0.7042135221435514, 0.7042135221435514, 0.8326648960866168, 0.8271418316048299, 0.8214821878157447, 0.8375207384152951, 0.8451675733901132, 0.7042135221435514, 0.8253306252902942, 0.8288754173380773, 0.8196172135522916, 0.8271289373645576, 0.8327162028432311, 0.8521098697580415, 0.8559561131694888]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"precision_score_weighted_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8349340517380371, 0.8611414697178841, 0.8611414697178841, 0.8611414697178841, 0.8611414697178841, 0.8611414697178841, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879, 0.8730825149918879]}], \"norm_macro_recall\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"norm_macro_recall\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.23399103040310387, 0.245980774842847, 0.0, 0.38148182321332214, 0.0, 0.009801370457108197, 0.0668200495328155, 0.0, 0.0, 0.4412219987098546, 0.41645785761713866, 0.3933308602198493, 0.4643463291052128, 0.16379481237910207, 0.0, 0.28434411959735867, 0.42731058605591765, 0.36963605585571696, 0.4226168087921259, 0.4216896574703452, 0.3763896225305278, 0.2961288706606537]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"norm_macro_recall_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.23399103040310387, 0.245980774842847, 0.245980774842847, 0.38148182321332214, 0.38148182321332214, 0.38148182321332214, 0.38148182321332214, 0.38148182321332214, 0.38148182321332214, 0.4412219987098546, 0.4412219987098546, 0.4412219987098546, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128, 0.4643463291052128]}], \"precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.757253761308073, 0.8381429249166009, 0.41938775510204085, 0.6597053342297695, 0.41938775510204085, 0.5309956794095675, 0.9239729040308419, 0.41938775510204085, 0.41938775510204085, 0.6536007920597683, 0.630064538361686, 0.6170080369782353, 0.6432986564683829, 0.8064356289099273, 0.41938775510204085, 0.7082097050090503, 0.6306984341707126, 0.6493124313083621, 0.6249874627300539, 0.6611741403063797, 0.7607064311137334, 0.8013984323185991]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.757253761308073, 0.8381429249166009, 0.8381429249166009, 0.8381429249166009, 0.8381429249166009, 0.8381429249166009, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419, 0.9239729040308419]}], \"matthews_correlation\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"matthews_correlation\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.3459258957679277, 0.4061484095565903, 0.0, 0.34700947422254486, 0.0, 0.03539922276700244, 0.23771258634339246, 0.0, 0.0, 0.3675069664179417, 0.32822735629601646, 0.30311723114622907, 0.3640345237089966, 0.31511653277856605, 0.0, 0.3432867162853986, 0.33322568173317996, 0.33178869309171294, 0.32479150105712185, 0.367563088737117, 0.44183035644626195, 0.4176076178021759]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"matthews_correlation_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.3459258957679277, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.4061484095565903, 0.44183035644626195, 0.44183035644626195]}], \"AUC_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"AUC_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7736912208980099, 0.7831981073491354, 0.7713611295753134, 0.7733136439082617, 0.7377748648548961, 0.7659932792487375, 0.7965360295754444, 0.7877495832188286, 0.7832523791998133, 0.7968704526154555, 0.7770968196441093, 0.7707950400793232, 0.794120416128985, 0.7600438066332932, 0.7513185206756958, 0.740585608769412, 0.7738842219796744, 0.7806494407731132, 0.7640305309415538, 0.7817399077049488, 0.8230223307502396, 0.816226036048648]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"AUC_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7736912208980099, 0.7831981073491354, 0.7831981073491354, 0.7831981073491354, 0.7831981073491354, 0.7831981073491354, 0.7965360295754444, 0.7965360295754444, 0.7965360295754444, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.7968704526154555, 0.8230223307502396, 0.8230223307502396]}], \"AUC_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"AUC_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9137831459114257, 0.91708315979453, 0.9105747605164516, 0.8747924475912813, 0.9018103567957795, 0.909500208246564, 0.9176134943773427, 0.9145786477856449, 0.9138289601554908, 0.8572247674580037, 0.8185381091211995, 0.795222823823407, 0.8253311120366513, 0.9089434957656533, 0.9055074274607803, 0.9034985422740526, 0.8195654588365958, 0.8777315007635708, 0.7875315840621963, 0.8765750381785367, 0.9295029848674163, 0.9270998195196446]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"AUC_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9137831459114257, 0.91708315979453, 0.91708315979453, 0.91708315979453, 0.91708315979453, 0.91708315979453, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9176134943773427, 0.9295029848674163, 0.9295029848674163]}], \"log_loss\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"log_loss\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.49543944450644267, 0.3641741789805684, 0.39040898322041295, 0.5447914191187385, 0.40421202085540564, 0.3831672502199484, 0.367456365161204, 0.38985393821928316, 0.39484030559360245, 0.5540579073979107, 0.5837038871670316, 0.5817045744616126, 0.6123007861291253, 0.4399882288896877, 0.4008789143673233, 0.43321837303414484, 0.5442871102126361, 0.5496999759295195, 0.6232028911890066, 0.614276439242103, 0.4460903626306712, 0.34098969006652596]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"log_loss_min\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.49543944450644267, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.3641741789805684, 0.34098969006652596]}], \"average_precision_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"average_precision_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.7094139030570927, 0.7284486681752101, 0.6910174262562929, 0.6998913553037158, 0.6738545540126548, 0.6809943397429715, 0.7252307706469218, 0.7086167253114901, 0.7026289859572454, 0.725732568158179, 0.7117934521699097, 0.6897236139068372, 0.7336778668953216, 0.701703800481523, 0.6654506931679788, 0.6466151103758832, 0.69732951763075, 0.7100414886608671, 0.688805966170566, 0.7197065954486358, 0.7671140244975878, 0.7593062468946856]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"average_precision_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.7094139030570927, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7284486681752101, 0.7336778668953216, 0.7336778668953216, 0.7336778668953216, 0.7336778668953216, 0.7336778668953216, 0.7336778668953216, 0.7336778668953216, 0.7336778668953216, 0.7671140244975878, 0.7671140244975878]}], \"average_precision_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"average_precision_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.9028692518859028, 0.9043008581386142, 0.900258546690415, 0.8675942694547888, 0.890723475750839, 0.8997853956641805, 0.9114464984999726, 0.9042754822137474, 0.8990818646592019, 0.8502985484777716, 0.8116766765953992, 0.7916775514830575, 0.8219753785317602, 0.8916834267592142, 0.895243178383133, 0.8860012467122548, 0.8108076413405545, 0.8701839881491598, 0.7854725533724382, 0.8677806303891124, 0.9185608350311462, 0.9170600943073853]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"average_precision_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.9028692518859028, 0.9043008581386142, 0.9043008581386142, 0.9043008581386142, 0.9043008581386142, 0.9043008581386142, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9114464984999726, 0.9185608350311462, 0.9185608350311462]}], \"f1_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"f1_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8387755102040817, 0.8034013605442177, 0.8387755102040817, 0.8387755102040817, 0.8496598639455782, 0.8387755102040817, 0.8387755102040817, 0.7829931972789114, 0.7408163265306121, 0.7149659863945578, 0.7510204081632653, 0.8571428571428572, 0.8387755102040817, 0.8442176870748299, 0.7374149659863947, 0.7972789115646259, 0.7217687074829932, 0.7979591836734693, 0.8659863945578232, 0.8680272108843538]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"f1_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972]}], \"f1_score_macro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"f1_score_macro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.6439077482034486, 0.6574965554026972, 0.4560523354847274, 0.6673613086757294, 0.4560523354847274, 0.46609624053571835, 0.5213777980874373, 0.4560523354847274, 0.4560523354847274, 0.670752302881486, 0.6382579748152892, 0.619148661607735, 0.6544122200664123, 0.6011322230324615, 0.4560523354847274, 0.6634412996705428, 0.6380646135392825, 0.6620620719892711, 0.6290761745692036, 0.6755305850930622, 0.7120569006195175, 0.6794523376408227]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"f1_score_macro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.6439077482034486, 0.6574965554026972, 0.6574965554026972, 0.6673613086757294, 0.6673613086757294, 0.6673613086757294, 0.6673613086757294, 0.6673613086757294, 0.6673613086757294, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.670752302881486, 0.6755305850930622, 0.7120569006195175, 0.7120569006195175]}], \"recall_score_micro\": [{\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"markers\", \"name\": \"recall_score_micro\", \"stepped\": false, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8387755102040817, 0.8034013605442177, 0.8387755102040817, 0.8387755102040817, 0.8496598639455782, 0.8387755102040817, 0.8387755102040817, 0.7829931972789114, 0.7408163265306121, 0.7149659863945578, 0.7510204081632653, 0.8571428571428572, 0.8387755102040817, 0.8442176870748299, 0.7374149659863946, 0.7972789115646259, 0.7217687074829932, 0.7979591836734694, 0.8659863945578231, 0.8680272108843538]}, {\"categories\": [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"], \"mode\": \"lines\", \"name\": \"recall_score_micro_max\", \"stepped\": true, \"type\": \"scatter\", \"data\": [0.8571428571428572, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972, 0.8687074829931972]}]}, \"metricName\": null, \"primaryMetricName\": \"AUC_weighted\", \"showLegend\": false}, \"run_metrics\": [{\"name\": \"experiment_status\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \"series\": [{\"data\": [\"DatasetEvaluation\", \"FeaturesGeneration\", \"DatasetFeaturization\", \"DatasetFeaturizationCompleted\", \"DatasetBalancing\", \"DatasetCrossValidationSplit\", \"ModelSelection\", \"BestRunExplainModel\", \"ModelExplanationDataSetSetup\", \"PickSurrogateModel\", \"EngineeredFeatureExplanations\", \"EngineeredFeatureExplanations\", \"RawFeaturesExplanations\", \"RawFeaturesExplanations\", \"BestRunExplainModel\"]}]}, {\"name\": \"experiment_status_description\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], \"series\": [{\"data\": [\"Gathering dataset statistics.\", \"Generating features for the dataset.\", \"Beginning to fit featurizers and featurize the dataset.\", \"Completed fit featurizers and featurizing the dataset.\", \"Performing class balancing sweeping\", \"Generating individually featurized CV splits.\", \"Beginning model selection.\", \"Best run model explanations started\", \"Model explanations data setup completed\", \"Choosing LightGBM as the surrogate model for explanations\", \"Computation of engineered features started\", \"Computation of engineered features completed\", \"Computation of raw features started\", \"Computation of raw features completed\", \"Best run model explanations completed\"]}]}, {\"name\": \"recall_score_macro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.6881948112652639]}]}, {\"name\": \"average_precision_score_weighted\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8860677828200302]}]}, {\"name\": \"precision_score_macro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.7607064311137334]}]}, {\"name\": \"log_loss\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.4460903626306712]}]}, {\"name\": \"norm_macro_recall\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.3763896225305278]}]}, {\"name\": \"AUC_macro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8230223307502396]}]}, {\"name\": \"AUC_micro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.9295029848674163]}]}, {\"name\": \"recall_score_micro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8659863945578231]}]}, {\"name\": \"f1_score_weighted\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8538543075956223]}]}, {\"name\": \"recall_score_weighted\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8659863945578231]}]}, {\"name\": \"weighted_accuracy\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.9324496327114783]}]}, {\"name\": \"average_precision_score_micro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.9185608350311462]}]}, {\"name\": \"f1_score_micro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8659863945578232]}]}, {\"name\": \"precision_score_micro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8659863945578231]}]}, {\"name\": \"matthews_correlation\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.44183035644626195]}]}, {\"name\": \"AUC_weighted\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8230223307502397]}]}, {\"name\": \"balanced_accuracy\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.6881948112652639]}]}, {\"name\": \"f1_score_macro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.7120569006195175]}]}, {\"name\": \"precision_score_weighted\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8521098697580415]}]}, {\"name\": \"accuracy\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.8659863945578231]}]}, {\"name\": \"average_precision_score_macro\", \"run_id\": \"AutoML_4d9148a5-c041-4e96-a3d9-557b261db721\", \"categories\": [0], \"series\": [{\"data\": [0.7671140244975878]}]}], \"run_logs\": \"\\nRun is completed.\", \"graph\": {}, \"widget_settings\": {\"childWidgetDisplay\": \"popup\", \"send_telemetry\": false, \"log_level\": \"INFO\", \"sdk_version\": \"1.26.0\"}, \"loading\": false}"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {
        "gather": {
          "logged": 1618812425824
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Best Model\n",
        "\n",
        "Our best model is VotingEnsemble with an AUC_weighted of **0.82302**. We will retrieve the best model and display its properties\n",
        "\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "best_run, fitted_model = remote_run.get_output()\r\n",
        "print(best_run)\r\n",
        "\r\n",
        "best_run_metrics = best_run.get_metrics()\r\n",
        "print('Best Run Id: ', best_run.id)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Run(Experiment: employee-attrition-automl,\n",
            "Id: AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20,\n",
            "Type: azureml.scriptrun,\n",
            "Status: Completed)\n",
            "Best Run Id:  AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20\n"
          ]
        }
      ],
      "execution_count": 11,
      "metadata": {
        "gather": {
          "logged": 1618813624782
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(fitted_model)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pipeline(memory=None,\n",
            "         steps=[('datatransformer',\n",
            "                 DataTransformer(enable_dnn=None, enable_feature_sweeping=None,\n",
            "                                 feature_sweeping_config=None,\n",
            "                                 feature_sweeping_timeout=None,\n",
            "                                 featurization_config=None, force_text_dnn=None,\n",
            "                                 is_cross_validation=None,\n",
            "                                 is_onnx_compatible=None, logger=None,\n",
            "                                 observer=None, task=None, working_dir=None)),\n",
            "                ('prefittedsoftvotingclassifier',...\n",
            "                                                                                                  n_estimators=10,\n",
            "                                                                                                  n_jobs=1,\n",
            "                                                                                                  oob_score=False,\n",
            "                                                                                                  random_state=None,\n",
            "                                                                                                  verbose=0,\n",
            "                                                                                                  warm_start=False))],\n",
            "                                                                     verbose=False))],\n",
            "                                               flatten_transform=None,\n",
            "                                               weights=[0.06666666666666667,\n",
            "                                                        0.06666666666666667,\n",
            "                                                        0.26666666666666666,\n",
            "                                                        0.06666666666666667,\n",
            "                                                        0.06666666666666667,\n",
            "                                                        0.06666666666666667,\n",
            "                                                        0.13333333333333333,\n",
            "                                                        0.13333333333333333,\n",
            "                                                        0.06666666666666667,\n",
            "                                                        0.06666666666666667]))],\n",
            "         verbose=False)\n",
            "Y_transformer(['LabelEncoder', LabelEncoder()])\n"
          ]
        }
      ],
      "execution_count": 12,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618813720415
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def print_model(fitted_model, prefix=\"\"):\r\n",
        "    for step in fitted_model.steps:\r\n",
        "        print(prefix + step[0])\r\n",
        "        if hasattr(step[1], 'estimators') and hasattr(step[1], 'weights'):\r\n",
        "            pprint({'estimators': list(\r\n",
        "                e[0] for e in step[1].estimators), 'weights': step[1].weights})\r\n",
        "            print()\r\n",
        "            for estimator in step[1].estimators:\r\n",
        "                print_model(estimator[1], estimator[0] + ' - ')\r\n",
        "        else:\r\n",
        "            pprint(step[1].get_params())\r\n",
        "            print()\r\n",
        "\r\n",
        "print_model(fitted_model)\r\n"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "datatransformer\n",
            "{'enable_dnn': None,\n",
            " 'enable_feature_sweeping': None,\n",
            " 'feature_sweeping_config': None,\n",
            " 'feature_sweeping_timeout': None,\n",
            " 'featurization_config': None,\n",
            " 'force_text_dnn': None,\n",
            " 'is_cross_validation': None,\n",
            " 'is_onnx_compatible': None,\n",
            " 'logger': None,\n",
            " 'observer': None,\n",
            " 'task': None,\n",
            " 'working_dir': None}\n",
            "\n",
            "prefittedsoftvotingclassifier\n",
            "{'estimators': ['9', '6', '12', '7', '8', '1', '19', '10', '11', '15'],\n",
            " 'weights': [0.06666666666666667,\n",
            "             0.06666666666666667,\n",
            "             0.26666666666666666,\n",
            "             0.06666666666666667,\n",
            "             0.06666666666666667,\n",
            "             0.06666666666666667,\n",
            "             0.13333333333333333,\n",
            "             0.13333333333333333,\n",
            "             0.06666666666666667,\n",
            "             0.06666666666666667]}\n",
            "\n",
            "9 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "9 - extratreesclassifier\n",
            "{'bootstrap': True,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': 'balanced',\n",
            " 'criterion': 'gini',\n",
            " 'max_depth': None,\n",
            " 'max_features': 0.1,\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.01,\n",
            " 'min_samples_split': 0.15052631578947367,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 50,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': False,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "6 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "6 - extratreesclassifier\n",
            "{'bootstrap': True,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': None,\n",
            " 'criterion': 'entropy',\n",
            " 'max_depth': None,\n",
            " 'max_features': 0.3,\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.01,\n",
            " 'min_samples_split': 0.056842105263157895,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 25,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': True,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "12 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "12 - randomforestclassifier\n",
            "{'bootstrap': False,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': 'balanced',\n",
            " 'criterion': 'gini',\n",
            " 'max_depth': None,\n",
            " 'max_features': 0.05,\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.06157894736842105,\n",
            " 'min_samples_split': 0.056842105263157895,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 50,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': False,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "7 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "7 - extratreesclassifier\n",
            "{'bootstrap': False,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': None,\n",
            " 'criterion': 'entropy',\n",
            " 'max_depth': None,\n",
            " 'max_features': 'sqrt',\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.01,\n",
            " 'min_samples_split': 0.15052631578947367,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 25,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': False,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "8 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "8 - randomforestclassifier\n",
            "{'bootstrap': True,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': None,\n",
            " 'criterion': 'gini',\n",
            " 'max_depth': None,\n",
            " 'max_features': 0.05,\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.01,\n",
            " 'min_samples_split': 0.10368421052631578,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 25,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': False,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "1 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "1 - xgboostclassifier\n",
            "{'base_score': 0.5,\n",
            " 'booster': 'gbtree',\n",
            " 'colsample_bylevel': 1,\n",
            " 'colsample_bynode': 1,\n",
            " 'colsample_bytree': 1,\n",
            " 'gamma': 0,\n",
            " 'learning_rate': 0.1,\n",
            " 'max_delta_step': 0,\n",
            " 'max_depth': 3,\n",
            " 'min_child_weight': 1,\n",
            " 'missing': nan,\n",
            " 'n_estimators': 100,\n",
            " 'n_jobs': 1,\n",
            " 'nthread': None,\n",
            " 'objective': 'binary:logistic',\n",
            " 'random_state': 0,\n",
            " 'reg_alpha': 0,\n",
            " 'reg_lambda': 1,\n",
            " 'scale_pos_weight': 1,\n",
            " 'seed': None,\n",
            " 'silent': None,\n",
            " 'subsample': 1,\n",
            " 'tree_method': 'auto',\n",
            " 'verbose': -10,\n",
            " 'verbosity': 0}\n",
            "\n",
            "19 - standardscalerwrapper\n",
            "{'class_name': 'StandardScaler',\n",
            " 'copy': True,\n",
            " 'module_name': 'sklearn.preprocessing._data',\n",
            " 'with_mean': False,\n",
            " 'with_std': True}\n",
            "\n",
            "19 - logisticregression\n",
            "{'C': 3.727593720314938,\n",
            " 'class_weight': 'balanced',\n",
            " 'dual': False,\n",
            " 'fit_intercept': True,\n",
            " 'intercept_scaling': 1,\n",
            " 'l1_ratio': None,\n",
            " 'max_iter': 100,\n",
            " 'multi_class': 'ovr',\n",
            " 'n_jobs': 1,\n",
            " 'penalty': 'l2',\n",
            " 'random_state': None,\n",
            " 'solver': 'saga',\n",
            " 'tol': 0.0001,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "10 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "10 - randomforestclassifier\n",
            "{'bootstrap': True,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': 'balanced',\n",
            " 'criterion': 'entropy',\n",
            " 'max_depth': None,\n",
            " 'max_features': 'sqrt',\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.01,\n",
            " 'min_samples_split': 0.2442105263157895,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 10,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': False,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "11 - maxabsscaler\n",
            "{'copy': True}\n",
            "\n",
            "11 - randomforestclassifier\n",
            "{'bootstrap': True,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': 'balanced',\n",
            " 'criterion': 'gini',\n",
            " 'max_depth': None,\n",
            " 'max_features': 0.2,\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.06157894736842105,\n",
            " 'min_samples_split': 0.10368421052631578,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 10,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': True,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n",
            "15 - standardscalerwrapper\n",
            "{'class_name': 'StandardScaler',\n",
            " 'copy': True,\n",
            " 'module_name': 'sklearn.preprocessing._data',\n",
            " 'with_mean': False,\n",
            " 'with_std': False}\n",
            "\n",
            "15 - extratreesclassifier\n",
            "{'bootstrap': False,\n",
            " 'ccp_alpha': 0.0,\n",
            " 'class_weight': None,\n",
            " 'criterion': 'gini',\n",
            " 'max_depth': None,\n",
            " 'max_features': None,\n",
            " 'max_leaf_nodes': None,\n",
            " 'max_samples': None,\n",
            " 'min_impurity_decrease': 0.0,\n",
            " 'min_impurity_split': None,\n",
            " 'min_samples_leaf': 0.06157894736842105,\n",
            " 'min_samples_split': 0.15052631578947367,\n",
            " 'min_weight_fraction_leaf': 0.0,\n",
            " 'n_estimators': 10,\n",
            " 'n_jobs': 1,\n",
            " 'oob_score': False,\n",
            " 'random_state': None,\n",
            " 'verbose': 0,\n",
            " 'warm_start': False}\n",
            "\n"
          ]
        }
      ],
      "execution_count": 13,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618813961620
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "for metric_name in best_run_metrics:\r\n",
        "    metric = best_run_metrics[metric_name]\r\n",
        "    print(metric_name,\"-\" , metric)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "f1_score_weighted - 0.8538543075956223\n",
            "precision_score_micro - 0.8659863945578231\n",
            "average_precision_score_weighted - 0.8860677828200302\n",
            "average_precision_score_macro - 0.7671140244975878\n",
            "recall_score_weighted - 0.8659863945578231\n",
            "accuracy - 0.8659863945578231\n",
            "f1_score_macro - 0.7120569006195175\n",
            "f1_score_micro - 0.8659863945578232\n",
            "weighted_accuracy - 0.9324496327114783\n",
            "recall_score_micro - 0.8659863945578231\n",
            "AUC_weighted - 0.8230223307502397\n",
            "precision_score_weighted - 0.8521098697580415\n",
            "balanced_accuracy - 0.6881948112652639\n",
            "log_loss - 0.4460903626306712\n",
            "matthews_correlation - 0.44183035644626195\n",
            "norm_macro_recall - 0.3763896225305278\n",
            "recall_score_macro - 0.6881948112652639\n",
            "AUC_macro - 0.8230223307502396\n",
            "precision_score_macro - 0.7607064311137334\n",
            "AUC_micro - 0.9295029848674163\n",
            "average_precision_score_micro - 0.9185608350311462\n",
            "confusion_matrix - aml://artifactId/ExperimentRun/dcid.AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20/confusion_matrix\n",
            "accuracy_table - aml://artifactId/ExperimentRun/dcid.AutoML_4d9148a5-c041-4e96-a3d9-557b261db721_20/accuracy_table\n"
          ]
        }
      ],
      "execution_count": 14,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618814462741
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "automodel = best_run.register_model(model_name='automl_model', \r\n",
        "                                    model_path='outputs/model.pkl',\r\n",
        "                                    tags={'Method':'AutoML'},\r\n",
        "                                    properties={'AUC_weighted': best_run_metrics['AUC_weighted']})\r\n",
        "\r\n",
        "print(automodel)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model(workspace=Workspace.create(name='quick-starts-ws-143105', subscription_id='1b944a9b-fdae-4f97-aeb1-b7eea0beac53', resource_group='aml-quickstarts-143105'), name=automl_model, id=automl_model:1, version=1, tags={'Method': 'AutoML'}, properties={'AUC_weighted': '0.8230223307502397'})\n"
          ]
        }
      ],
      "execution_count": 15,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618814509056
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Deployment\n",
        "\n",
        "Remember you have to deploy only one of the two models you trained.. Perform the steps in the rest of this notebook only if you wish to deploy this model.\n",
        "\n",
        "TODO: In the cell below, register the model, create an inference config and deploy the model as a web service."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Download scoring file \r\n",
        "best_run.download_file('outputs/scoring_file_v_1_0_0.py', 'score.py')\r\n",
        "\r\n",
        "# Download environment file\r\n",
        "best_run.download_file('outputs/conda_env_v_1_0_0.yml', 'env.yml')"
      ],
      "outputs": [],
      "execution_count": 16,
      "metadata": {
        "gather": {
          "logged": 1618814708266
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "aciconfig = AciWebservice.deploy_configuration(cpu_cores=1, \r\n",
        "                                               memory_gb=1, \r\n",
        "                                               description='Predict Employee Attrition with AutoML')"
      ],
      "outputs": [],
      "execution_count": 17,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618814766996
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "inference_config = InferenceConfig(entry_script=\"score.py\", environment=best_run.get_environment())\r\n",
        "\r\n",
        "service = Model.deploy(workspace=ws, \r\n",
        "                       name='automl-webservice', \r\n",
        "                       models=[automodel], \r\n",
        "                       inference_config=inference_config, \r\n",
        "                       deployment_config=aciconfig)"
      ],
      "outputs": [],
      "execution_count": 18,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618814813969
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, send a request to the web service you deployed to test it."
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598431657736
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "service.wait_for_deployment(show_output=True)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tips: You can try get_logs(): https://aka.ms/debugimage#dockerlog or local deployment: https://aka.ms/debugimage#debug-locally to debug if deployment takes longer than 10 minutes.\n",
            "Running\n",
            "2021-04-19 06:46:53+00:00 Creating Container Registry if not exists.\n",
            "2021-04-19 06:46:53+00:00 Registering the environment.\n",
            "2021-04-19 06:46:55+00:00 Use the existing image.\n",
            "2021-04-19 06:46:55+00:00 Generating deployment configuration.\n",
            "2021-04-19 06:46:57+00:00 Submitting deployment to compute.\n",
            "2021-04-19 06:47:02+00:00 Checking the status of deployment automl-webservice..\n",
            "2021-04-19 06:50:52+00:00 Checking the status of inference endpoint automl-webservice.\n",
            "Succeeded\n",
            "ACI service creation operation finished, operation \"Succeeded\"\n"
          ]
        }
      ],
      "execution_count": 19,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618815060593
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "print(\"Service State: \",service.state)\r\n",
        "print(\"Scoring URI: \",service.scoring_uri)\r\n",
        "print(\"Swagger URI: \",service.swagger_uri)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Service State:  Healthy\n",
            "Scoring URI:  http://baa3b839-ff6c-4d34-952e-28f72c3f33c6.southcentralus.azurecontainer.io/score\n",
            "Swagger URI:  http://baa3b839-ff6c-4d34-952e-28f72c3f33c6.southcentralus.azurecontainer.io/swagger.json\n"
          ]
        }
      ],
      "execution_count": 20,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618815265651
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "TODO: In the cell below, print the logs of the web service and delete the service"
      ],
      "metadata": {
        "collapsed": true,
        "gather": {
          "logged": 1598432765711
        },
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!python logs.py"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2021-04-19T06:50:47,201909900+00:00 - gunicorn/run \r\n",
            "2021-04-19T06:50:47,201887700+00:00 - rsyslog/run \r\n",
            "2021-04-19T06:50:47,216630700+00:00 - nginx/run \r\n",
            "2021-04-19T06:50:47,217653500+00:00 - iot-server/run \r\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libcrypto.so.1.0.0: no version information available (required by /usr/sbin/nginx)\r\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libcrypto.so.1.0.0: no version information available (required by /usr/sbin/nginx)\r\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)\r\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)\r\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)\r\n",
            "rsyslogd: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libuuid.so.1: no version information available (required by rsyslogd)\r\n",
            "EdgeHubConnectionString and IOTEDGE_IOTHUBHOSTNAME are not set. Exiting...\r\n",
            "2021-04-19T06:50:47,556385000+00:00 - iot-server/finish 1 0\r\n",
            "2021-04-19T06:50:47,559415300+00:00 - Exit code 1 is normal. Not restarting iot-server.\r\n",
            "Starting gunicorn 19.9.0\r\n",
            "Listening at: http://127.0.0.1:31311 (71)\r\n",
            "Using worker: sync\r\n",
            "worker timeout is set to 300\r\n",
            "Booting worker with pid: 100\r\n",
            "SPARK_HOME not set. Skipping PySpark Initialization.\r\n",
            "Generating new fontManager, this may take some time...\r\n",
            "Initializing logger\r\n",
            "2021-04-19 06:50:49,913 | root | INFO | Starting up app insights client\r\n",
            "2021-04-19 06:50:49,913 | root | INFO | Starting up request id generator\r\n",
            "2021-04-19 06:50:49,913 | root | INFO | Starting up app insight hooks\r\n",
            "2021-04-19 06:50:49,913 | root | INFO | Invoking user's init function\r\n",
            "2021-04-19 06:50:54,440 | azureml.core | WARNING | Failure while loading azureml_run_type_providers. Failed to load entrypoint automl = azureml.train.automl.run:AutoMLRun._from_run_dto with exception cannot import name 'RunType'.\r\n",
            "Failure while loading azureml_run_type_providers. Failed to load entrypoint automl = azureml.train.automl.run:AutoMLRun._from_run_dto with exception cannot import name 'RunType'.\r\n",
            "2021-04-19 06:50:54,880 | root | INFO | Users's init has completed successfully\r\n",
            "2021-04-19 06:50:54,898 | root | INFO | Skipping middleware: dbg_model_info as it's not enabled.\r\n",
            "2021-04-19 06:50:54,898 | root | INFO | Skipping middleware: dbg_resource_usage as it's not enabled.\r\n",
            "2021-04-19 06:50:54,900 | root | INFO | Scoring timeout is found from os.environ: 60000 ms\r\n",
            "2021-04-19 06:50:54,948 | root | INFO | 200\r\n",
            "127.0.0.1 - - [19/Apr/2021:06:50:54 +0000] \"GET /swagger.json HTTP/1.0\" 200 4580 \"-\" \"Go-http-client/1.1\"\r\n",
            "2021-04-19 06:51:00,124 | root | INFO | 200\r\n",
            "127.0.0.1 - - [19/Apr/2021:06:51:00 +0000] \"GET /swagger.json HTTP/1.0\" 200 4580 \"-\" \"Go-http-client/1.1\"\r\n",
            "2021-04-19 06:51:49,669 | root | INFO | 200\r\n",
            "127.0.0.1 - - [19/Apr/2021:06:51:49 +0000] \"GET /swagger.json HTTP/1.0\" 200 4580 \"-\" \"Go-http-client/1.1\"\r\n",
            "2021-04-19 06:55:41,368 | root | INFO | 200\r\n",
            "127.0.0.1 - - [19/Apr/2021:06:55:41 +0000] \"GET /swagger.json HTTP/1.0\" 200 4580 \"-\" \"Go-http-client/1.1\"\r\n",
            "2021-04-19 06:55:44,214 | root | INFO | 200\r\n",
            "127.0.0.1 - - [19/Apr/2021:06:55:44 +0000] \"GET /swagger.json HTTP/1.0\" 200 4580 \"-\" \"Go-http-client/1.1\"\r\n",
            "\r\n"
          ]
        }
      ],
      "execution_count": 21,
      "metadata": {
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\r\n",
        "**Send a request to the deployed web service**"
      ],
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Import test data\r\n",
        "test_df = df.sample(4) # sample data from original dataset\r\n",
        "label_df = test_df.pop('Attrition')\r\n",
        "\r\n",
        "test_sample = json.dumps({'data': test_df.to_dict(orient='records')})\r\n",
        "\r\n",
        "print(test_sample)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{\"data\": [{\"Age\": 32, \"BusinessTravel\": \"Travel_Frequently\", \"DailyRate\": 379, \"Department\": \"Sales\", \"DistanceFromHome\": 5, \"Education\": 2, \"EducationField\": \"Life Sciences\", \"EmployeeCount\": 1, \"EmployeeNumber\": 889, \"EnvironmentSatisfaction\": 2, \"Gender\": \"Male\", \"HourlyRate\": 48, \"JobInvolvement\": 3, \"JobLevel\": 2, \"JobRole\": \"Sales Executive\", \"JobSatisfaction\": 2, \"MaritalStatus\": \"Married\", \"MonthlyIncome\": 6524, \"MonthlyRate\": 8891, \"NumCompaniesWorked\": 1, \"Over18\": true, \"OverTime\": false, \"PercentSalaryHike\": 14, \"PerformanceRating\": 3, \"RelationshipSatisfaction\": 4, \"StandardHours\": 80, \"StockOptionLevel\": 1, \"TotalWorkingYears\": 10, \"TrainingTimesLastYear\": 3, \"WorkLifeBalance\": 3, \"YearsAtCompany\": 10, \"YearsInCurrentRole\": 8, \"YearsSinceLastPromotion\": 5, \"YearsWithCurrManager\": 3}, {\"Age\": 45, \"BusinessTravel\": \"Travel_Rarely\", \"DailyRate\": 192, \"Department\": \"Research & Development\", \"DistanceFromHome\": 10, \"Education\": 2, \"EducationField\": \"Life Sciences\", \"EmployeeCount\": 1, \"EmployeeNumber\": 544, \"EnvironmentSatisfaction\": 1, \"Gender\": \"Male\", \"HourlyRate\": 69, \"JobInvolvement\": 3, \"JobLevel\": 1, \"JobRole\": \"Research Scientist\", \"JobSatisfaction\": 4, \"MaritalStatus\": \"Married\", \"MonthlyIncome\": 2654, \"MonthlyRate\": 9655, \"NumCompaniesWorked\": 3, \"Over18\": true, \"OverTime\": false, \"PercentSalaryHike\": 21, \"PerformanceRating\": 4, \"RelationshipSatisfaction\": 4, \"StandardHours\": 80, \"StockOptionLevel\": 2, \"TotalWorkingYears\": 8, \"TrainingTimesLastYear\": 3, \"WorkLifeBalance\": 2, \"YearsAtCompany\": 2, \"YearsInCurrentRole\": 2, \"YearsSinceLastPromotion\": 0, \"YearsWithCurrManager\": 2}, {\"Age\": 31, \"BusinessTravel\": \"Non-Travel\", \"DailyRate\": 587, \"Department\": \"Sales\", \"DistanceFromHome\": 2, \"Education\": 4, \"EducationField\": \"Life Sciences\", \"EmployeeCount\": 1, \"EmployeeNumber\": 1324, \"EnvironmentSatisfaction\": 4, \"Gender\": \"Female\", \"HourlyRate\": 57, \"JobInvolvement\": 3, \"JobLevel\": 3, \"JobRole\": \"Sales Executive\", \"JobSatisfaction\": 3, \"MaritalStatus\": \"Divorced\", \"MonthlyIncome\": 9852, \"MonthlyRate\": 8935, \"NumCompaniesWorked\": 1, \"Over18\": true, \"OverTime\": true, \"PercentSalaryHike\": 19, \"PerformanceRating\": 3, \"RelationshipSatisfaction\": 1, \"StandardHours\": 80, \"StockOptionLevel\": 1, \"TotalWorkingYears\": 10, \"TrainingTimesLastYear\": 5, \"WorkLifeBalance\": 2, \"YearsAtCompany\": 10, \"YearsInCurrentRole\": 8, \"YearsSinceLastPromotion\": 9, \"YearsWithCurrManager\": 6}, {\"Age\": 25, \"BusinessTravel\": \"Travel_Rarely\", \"DailyRate\": 1372, \"Department\": \"Sales\", \"DistanceFromHome\": 18, \"Education\": 1, \"EducationField\": \"Life Sciences\", \"EmployeeCount\": 1, \"EmployeeNumber\": 1399, \"EnvironmentSatisfaction\": 1, \"Gender\": \"Male\", \"HourlyRate\": 93, \"JobInvolvement\": 4, \"JobLevel\": 2, \"JobRole\": \"Sales Executive\", \"JobSatisfaction\": 3, \"MaritalStatus\": \"Married\", \"MonthlyIncome\": 6232, \"MonthlyRate\": 12477, \"NumCompaniesWorked\": 2, \"Over18\": true, \"OverTime\": false, \"PercentSalaryHike\": 11, \"PerformanceRating\": 3, \"RelationshipSatisfaction\": 2, \"StandardHours\": 80, \"StockOptionLevel\": 0, \"TotalWorkingYears\": 6, \"TrainingTimesLastYear\": 3, \"WorkLifeBalance\": 2, \"YearsAtCompany\": 3, \"YearsInCurrentRole\": 2, \"YearsSinceLastPromotion\": 1, \"YearsWithCurrManager\": 2}]}\n"
          ]
        }
      ],
      "execution_count": 22,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618815821518
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scoring_uri = service.scoring_uri\r\n",
        "input_data = test_sample\r\n",
        "\r\n",
        "# Set the content type\r\n",
        "headers = {'Content-Type': 'application/json'}\r\n",
        "\r\n",
        "# Make the request and display the response\r\n",
        "resp = requests.post(scoring_uri, input_data, headers=headers)\r\n",
        "print(resp.text)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"{\\\"result\\\": [false, false, false, false]}\"\n"
          ]
        }
      ],
      "execution_count": 23,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618815860595
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\r\n",
        "print(service.get_logs())"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2021-04-19T07:00:50,781641000+00:00 - iot-server/run \n",
            "2021-04-19T07:00:50,780963100+00:00 - gunicorn/run \n",
            "2021-04-19T07:00:50,780214700+00:00 - rsyslog/run \n",
            "2021-04-19T07:00:50,819536100+00:00 - nginx/run \n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libcrypto.so.1.0.0: no version information available (required by /usr/sbin/nginx)\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libcrypto.so.1.0.0: no version information available (required by /usr/sbin/nginx)\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)\n",
            "/usr/sbin/nginx: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libssl.so.1.0.0: no version information available (required by /usr/sbin/nginx)\n",
            "rsyslogd: /azureml-envs/azureml_8e5a5a51349877e7d47c6a2872e0ebfd/lib/libuuid.so.1: no version information available (required by rsyslogd)\n",
            "EdgeHubConnectionString and IOTEDGE_IOTHUBHOSTNAME are not set. Exiting...\n",
            "2021-04-19T07:00:51,235171200+00:00 - iot-server/finish 1 0\n",
            "2021-04-19T07:00:51,236993700+00:00 - Exit code 1 is normal. Not restarting iot-server.\n",
            "Starting gunicorn 19.9.0\n",
            "Listening at: http://127.0.0.1:31311 (68)\n",
            "Using worker: sync\n",
            "worker timeout is set to 300\n",
            "Booting worker with pid: 94\n",
            "SPARK_HOME not set. Skipping PySpark Initialization.\n",
            "Generating new fontManager, this may take some time...\n",
            "Initializing logger\n",
            "2021-04-19 07:00:53,976 | root | INFO | Starting up app insights client\n",
            "2021-04-19 07:00:53,981 | root | INFO | Starting up request id generator\n",
            "2021-04-19 07:00:53,981 | root | INFO | Starting up app insight hooks\n",
            "2021-04-19 07:00:53,981 | root | INFO | Invoking user's init function\n",
            "2021-04-19 07:00:58,352 | azureml.core | WARNING | Failure while loading azureml_run_type_providers. Failed to load entrypoint automl = azureml.train.automl.run:AutoMLRun._from_run_dto with exception cannot import name 'RunType'.\n",
            "Failure while loading azureml_run_type_providers. Failed to load entrypoint automl = azureml.train.automl.run:AutoMLRun._from_run_dto with exception cannot import name 'RunType'.\n",
            "2021-04-19 07:00:58,828 | root | INFO | Users's init has completed successfully\n",
            "2021-04-19 07:00:58,834 | root | INFO | Skipping middleware: dbg_model_info as it's not enabled.\n",
            "2021-04-19 07:00:58,834 | root | INFO | Skipping middleware: dbg_resource_usage as it's not enabled.\n",
            "2021-04-19 07:00:58,836 | root | INFO | Scoring timeout is found from os.environ: 60000 ms\n",
            "2021-04-19 07:01:22,197 | root | INFO | 200\n",
            "127.0.0.1 - - [19/Apr/2021:07:01:22 +0000] \"GET /swagger.json HTTP/1.0\" 200 4580 \"-\" \"Go-http-client/1.1\"\n",
            "2021-04-19 07:04:19,586 | root | INFO | Validation Request Content-Type\n",
            "2021-04-19 07:04:19,592 | root | INFO | Scoring Timer is set to 60.0 seconds\n",
            "2021-04-19 07:04:19,857 | root | INFO | 200\n",
            "127.0.0.1 - - [19/Apr/2021:07:04:19 +0000] \"POST /score HTTP/1.0\" 200 44 \"-\" \"python-requests/2.25.1\"\n",
            "\n"
          ]
        }
      ],
      "execution_count": 24,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1618815875149
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "service.delete()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        }
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}